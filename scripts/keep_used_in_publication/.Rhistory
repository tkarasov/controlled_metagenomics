g_s_load_limited = g_s_load_com[unlist(keep_pop)]
return(adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited))
}
adon_mat = matrix(nrow = 100, ncol = 3)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop")
for( i in 1:100){
boot = adonis2_sim()
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
}
summary(adon_mat)
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
for( i in 1:100){
boot = adonis2_sim()
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
adon_mat[i,4:6] = boot$`Pr(>F)`[4:6]
}
summary(adon_mat)
boot$`Pr(>F)`
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
for( i in 1:100){
boot = adonis2_sim()
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
adon_mat[i,4:6] = boot$`Pr(>F)`[1:3]
}
summary(adon_mat)
disp =  betadisper(d = as.dist(bc_limited), group = as.factor(g_s_pop_limited))
permutest(disp)
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
load_pcoa  =  ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=log10(g_s_load_limited)), cex = 2) +
scale_color_gradient2(name = "", low = "blue", mid = "white", high = "red") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(x=NULL, y = NULL) +
#xlab(paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep="")) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), axis.text.y = element_blank(), legend.text.align = 1, legend.title = element_blank(), legend.position = 'bottom')
country_pcoa = pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_country_limited), cex = 2) +
scale_color_discrete(name="Country") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(),legend.title = element_blank(), legend.position = 'bottom') +
scale_color_calc()
pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_pop_limited), cex = 2) +
scale_color_discrete(name="pop") +
scale_color_brewer(palette = "Set1") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12))  +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), legend.title = element_blank(), axis.text.y = element_blank(), legend.position = 'bottom')
gA  =  ggplotGrob(load_pcoa)
gB  =  ggplotGrob(pop_pcoa)
load_pcoa  =  ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=log10(g_s_load_limited)), cex = 2) +
scale_color_gradient2(name = "", low = "blue", mid = "white", high = "red") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(x=NULL, y = NULL) +
#xlab(paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep="")) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), axis.text.y = element_blank(), legend.text.align = 1, legend.title = element_blank(), legend.position = 'bottom')
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
load_pcoa  =  ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=log10(g_s_load_limited)), cex = 2) +
scale_color_gradient2(name = "", low = "blue", mid = "white", high = "red") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(x=NULL, y = NULL) +
#xlab(paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep="")) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), axis.text.y = element_blank(), legend.text.align = 1, legend.title = element_blank(), legend.position = 'bottom')
country_pcoa = pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_country_limited), cex = 2) +
scale_color_discrete(name="Country") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(),legend.title = element_blank(), legend.position = 'bottom') +
scale_color_calc()
gA  =  ggplotGrob(load_pcoa)
load_pca
load_pcoa
bc_pcoa
bc_pcoa = pcoa(bc_limited, correction = "lingoes")
bc_pcoa = pcoa(bc_limited, correction = "lingoes")
perc_explained = bc_pcoa$values[,3]
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
load_pcoa  =  ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=log10(g_s_load_limited)), cex = 2) +
scale_color_gradient2(name = "", low = "blue", mid = "white", high = "red") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(x=NULL, y = NULL) +
#xlab(paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep="")) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), axis.text.y = element_blank(), legend.text.align = 1, legend.title = element_blank(), legend.position = 'bottom')
country_pcoa = pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_country_limited), cex = 2) +
scale_color_discrete(name="Country") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(),legend.title = element_blank(), legend.position = 'bottom') +
scale_color_calc()
pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_pop_limited), cex = 2) +
scale_color_discrete(name="pop") +
scale_color_brewer(palette = "Set1") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12))  +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), legend.title = element_blank(), axis.text.y = element_blank(), legend.position = 'bottom')
gA  =  ggplotGrob(load_pcoa)
gB  =  ggplotGrob(pop_pcoa)
gC  =  ggplotGrob(country_pcoa)
gA$widths  =  gB$widths = gC$widths
gA$heights = gB$heights = gC$heights
grid.arrange(gC, gB, gA, ncol = 3, left = paste(paste("Axis 2:", (100*round(perc_explained[2],3)), sep=" "), "%", sep=""), bottom = paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep=""))
pdf(paste(paste("~/Dropbox/controlled_metagenomics/results_figures/pcoa_bray_curtis_", concat_name, sep=""), ".pdf", sep=""), family = "ArialMT", useDingbats=FALSE, width = 7.204, height = 4)
grid.arrange(gC, gB, gA, ncol = 3, left = paste(paste("Axis 2:", (100*round(perc_explained[2],3)), sep=" "), "%", sep=""), bottom = paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep=""))
dev.off()
eyach = which(g_s_pop_com == "Eyach")
g_s_load_com_eyach = g_s_load_com[eyach]
bc_comp_eyach = bc_comp[eyach, eyach]
adonis2(bc_comp_eyach ~ g_s_load_com_eyach)
adonis2(bc_comp ~ g_s_load_com)
adonis2(bc_comp_eyach ~ g_s_load_com_eyach)
find_top_abundance(g_s_otus_filter)
pc1 = bc_pcoa$vectors[,1]
german_pc1 = pc1[g_s_country=="germany"]
sweden_pc1 = pc1[g_s_country=="Sweden"]
wilcox.test(german_pc1, sweden_pc1)
pc2 = bc_pcoa$vectors[,2]
german_pc2 = pc2[g_s_country=="germany"]
sweden_pc2 = pc2[g_s_country=="Sweden"]
wilcox.test(german_pc2, sweden_pc2)
pc2
length(pc2)
g_s_country
bc_pcoa[which(g_s_country == "germany"),]
dim(bc_pcoa)
bc_pcoa
bc_pcoa$values[which(g_s_country == "germany"),]
bc_pcoa$values
dim(bc_pcoa$values)
pc2[g_s_country=="germany"]
german_samples
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
keep
dim(keep)
keep
no_keep = german_samples[which(duplicated(german_samples$uniqueID)),]
no_keep
dim(no_keep)
no_keep$uniqueID
no_keep$SampleID
no_keep$metagenome_identifier
no_keep = german_samples[which(duplicated(german_samples$uniqueID)),]$metagenome_identifier
no_keep = c(no_keep, c("NextMet175", "NextMet193", "NextMet194", "NextMet55"))
no_keep
no_keep
no_keep = german_samples[which(duplicated(german_samples$uniqueID)),]$metagenome_identifier
no_keep
c(no_keep, c("NextMet175", "NextMet193", "NextMet194", "NextMet55"))
no_keep = as.character(german_samples[which(duplicated(german_samples$uniqueID)),]$metagenome_identifier)
no_keep
no_keep = c(no_keep, c("NextMet175", "NextMet193", "NextMet194", "NextMet55"))
no_keep
g_s_all
g_s_keep = g_s_all[-no_keep,]
no_keep
g_s_keep = g_s_all[no_keep,]
g_s_keep = g_s_all[!no_keep,]
g_s_keep = g_s_all[no_keep,]
g_s_keep
g_s_keep = g_s_all[rownames(g_s_al)%ni%no_keep,]
g_s_keep = g_s_all[rownames(g_s_all)%ni%no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE))
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1)
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),  row.names = 1)
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),  row.names = TRUE)
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot = process_gs(g_s, subset=FALSE)
g_s_tot = process_gs(g_s, subset=FALSE)
g_s_otus_filter = g_s_tot[[1]]
g_s_country = g_s_tot[[2]]
g_s_pop = g_s_tot[[3]]
g_s_load = g_s_tot[[4]]
g_s_load
bray_curtis = as.matrix( vegdist(g_s_otus_filter, method="bray", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE) )
concat_name = "bacteria"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
concat_name = "bac"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
concat_name = "_bac"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
concat_name = "_bacteria"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
concat_name = "_bacteria"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep='')
concat_name = "_bacteria.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),row.names = TRUE)
concat_name = "_oomycete.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
concat_name = "_fungi.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),row.names = TRUE)
out_bacteria = meta_table("bacteria", keep)
out_bacteria = meta_table("bacteria", keep)
p_bac = plot_side_by_side(out_bacteria, colors = sample(RColorBrewer::brewer.pal(n=9, 'Paired'),9))
p_bac = plot_side_by_side(out_bacteria, colors = sample(RColorBrewer::brewer.pal(n=9, 'Paired'),9))
out_fungi = meta_table("fungi", keep)
out_fungi = meta_table("fungi", keep)
p_fungi=plot_side_by_side(out_fungi, colors = sample(RColorBrewer::brewer.pal(n=9, 'Paired'),9))
out_oom=meta_table("oomycete", keep)
concat_name="_bacteria.csv"
g_s = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot = process_gs(g_s, subset=FALSE)
g_s_otus_filter = g_s_tot[[1]]
g_s_country = g_s_tot[[2]]
g_s_pop = g_s_tot[[3]]
g_s_load = g_s_tot[[4]]
bray_curtis = as.matrix( vegdist(g_s_otus_filter, method="bray", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE) )
populations = unique(g_s_pop_com)
adonis2_sim <- function(){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
return(adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited))
}
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
for( i in 1:100){
boot = adonis2_sim()
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
adon_mat[i,4:6] = boot$`Pr(>F)`[1:3]
}
summary(adon_mat)
g_s_country_com[unlist(keep_pop)]
adonis2_sim
adonis2_sim()
adonis2_sim()
adonis2_sim()
adonis2_sim()
adonis2_sim()
adonis2_sim()
adonis2_sim <- function(g_s_country_com = g_s_country_com, g_s_pop_com = g_s_pop_com, g_s_load_com = g_s_load_com, populations = populations){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
return(adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited))
}
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
adonis2_sim()
adonis2_sim <- function(g_s_country_com = g_s_country_com, g_s_pop_com = g_s_pop_com, g_s_load_com = g_s_load_com, populations = populations){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
return(adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited))
}
adonis2_sim()
adonis2_sim <- function(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
return(adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited))
}
boot = adonis2_sim(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations)
boot
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
adonis2_sim <- function(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
adonis_output = adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited)
return(adonis_output)
}
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
adonis2_sim(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations)
for( i in 1:100){
print(i)
boot = adonis2_sim(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations)
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
adon_mat[i,4:6] = boot$`Pr(>F)`[1:3]
}
summary(adon_mat)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library('dplyr')
library('tidyr')
library(ggplot2)
library(RColorBrewer)
library(wesanderson)
library(matrixStats)
require(gridExtra)
library(cowplot)
#library(moments)
library(intrval)
library("Hmisc")
library(ape)
library(cowplot)
library(vegan)
library(extrafont)
library(lme4)
library(ape)
#font_import()
loadfonts()
source("~/Dropbox/controlled_metagenomics/scripts/keep_used_in_publication/controlled_metagenomics_functions.R")
german_samples = read.table("~/Dropbox/germany_pathogen_collections/sample_data/plate_sample_locations/sample_infoFinal_2018.txt", sep="\t", header=T)
#duplicated samples (samples collected or sequenced twice)
keep = german_samples[-which(duplicated(german_samples$uniqueID)),]
no_keep = as.character(german_samples[which(duplicated(german_samples$uniqueID)),]$metagenome_identifier)
#These have too few reads: NextMet175, NextMet193, NextMet194, NextMet55
#These are the controls
#duplicated: NextMet24, NextMet50, NextMet66, NextMet70, NextMet83, NextMet85, NextMet87, NextMet96, NextMet119, NextMet131, NextMet142, NextMet144
keep = keep[which(keep$uniqueID %ni% c("NextMet175", "NextMet193", "NextMet194", "NextMet55")),]
no_keep = c(no_keep, c("NextMet175", "NextMet193", "NextMet194", "NextMet55"))
concat_name = "_bacteria.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),row.names = TRUE)
concat_name = "_oomycete.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),row.names = TRUE)
concat_name = "_fungi.csv"
g_s_all = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_keep = g_s_all[rownames(g_s_all) %ni% no_keep,]
write.csv(g_s_keep, paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''),row.names = TRUE)
out_bacteria = meta_table("bacteria", keep)
p_bac = plot_side_by_side(out_bacteria, colors = sample(RColorBrewer::brewer.pal(n=9, 'Paired'),9))
out_fungi = meta_table("fungi", keep)
p_fungi=plot_side_by_side(out_fungi, colors = sample(RColorBrewer::brewer.pal(n=9, 'Paired'),9))
out_oom=meta_table("oomycete", keep)
p_oom=plot_side_by_side(out_oom, colors = sample(RColorBrewer::brewer.pal(n=8, 'Dark2'),8))
p_tot = plot_grid(p_bac, p_oom, ncol=2, align = 'h')
p_tot
pdf("~/Dropbox/controlled_metagenomics/results_figures/oomycete_bacteria_germany_sweden.pdf", family = "ArialMT", width = 8, height = 5)
p_tot
dev.off()
pdf("~/Dropbox/controlled_metagenomics/results_figures/oomycete_germany_sweden.pdf", family = "ArialMT", height = 5, width = 5)
p_oom
dev.off()
pdf("~/Dropbox/controlled_metagenomics/results_figures/bacteria_germany_sweden.pdf", family = "ArialMT", height = 5, width = 5)
p_bac
dev.off()
pdf("~/Dropbox/controlled_metagenomics/results_figures/fungi_germany_sweden.pdf", family = "ArialMT", height = 5, width = 5)
p_fungi
dev.off()
concat_name="_bacteria.csv"
g_s = read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined_nodup", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot = process_gs(g_s, subset=FALSE)
g_s_otus_filter = g_s_tot[[1]]
g_s_country = g_s_tot[[2]]
g_s_pop = g_s_tot[[3]]
g_s_load = g_s_tot[[4]]
bray_curtis = as.matrix( vegdist(g_s_otus_filter, method="bray", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE) )
#exclude NA
bc_comp = bray_curtis[which(!is.na(g_s_pop)), which(!is.na(g_s_pop))]
g_s_load_com = g_s_load[which(!is.na(g_s_pop))]
g_s_pop_com = g_s_pop[which(!is.na(g_s_pop))]
g_s_country_com = g_s_country[which(!is.na(g_s_pop))]
disp = betadisper(d = as.dist(bc_comp), group = as.factor(g_s_country_com))
permutest(disp)
table(g_s_pop_com)
table(g_s_country_com)
german = table(g_s_country_com)[1]
sweden = table(g_s_country_com)[2]
german_list = which(g_s_country_com == "germany")
swedish_list = which(g_s_country_com == "Sweden")
#run adonis2 100 times with different subsets from germany
value = matrix(ncol = 2, nrow = 100)
colnames(value) = c("country", "load")
for(i in 1:100){
german_sub = sample(german_list, size = as.numeric(sweden))
full = c(german_sub, swedish_list)
adon = adonis2(bc_comp[full, full] ~ g_s_country_com[full] + g_s_load_com[full])
value[i,1] = adon$R2[1]
value[i,2] = adon$R2[2]
}
#pop_mv = adonis2(bc_comp ~ g_s_pop_com / g_s_country_com + g_s_load_com, strata = g_s_pop_com )
#country_mv = adonis2(bc_comp ~ g_s_country_com + g_s_load_com)
populations = unique(g_s_pop_com)
adonis2_sim <- function(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations){
i = 0
keep_pop = matrix(ncol = 7, nrow = 9)
rownames(keep_pop) = populations
for(rec in populations){
i = i+1
subset = which(g_s_pop_com == rec)
sampling = sample(subset, 7, replace = FALSE)
keep_pop[i,] = sampling
}
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
adonis_output = adonis2(bc_limited ~ g_s_country_limited / g_s_pop_limited + g_s_load_limited, strata = g_s_country_limited)
return(adonis_output)
}
adon_mat = matrix(nrow = 100, ncol = 6)
colnames(adon_mat) = c("R2_country", "R2_load", "R2_pop", "pval_country", "pval_load", "pval_pop")
for( i in 1:100){
print(i)
boot = adonis2_sim(g_s_country_com, g_s_pop_com, g_s_load_com , populations = populations)
adon_mat[i,1] = boot$R2[1]
adon_mat[i,2] = boot$R2[2]
adon_mat[i,3] = boot$R2[3]
adon_mat[i,4:6] = boot$`Pr(>F)`[1:3]
}
summary(adon_mat)
disp =  betadisper(d = as.dist(bc_limited), group = as.factor(g_s_pop_limited))
permutest(disp)
bc_pcoa = pcoa(bc_limited, correction = "lingoes")
perc_explained = bc_pcoa$values[,3]
bc_limited = bc_comp[unlist(keep_pop), unlist(keep_pop)]
g_s_pop_limited = g_s_pop_com[unlist(keep_pop)]
g_s_country_limited = g_s_country_com[unlist(keep_pop)]
g_s_load_limited = g_s_load_com[unlist(keep_pop)]
load_pcoa  =  ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color=log10(g_s_load_limited)), cex = 2) +
scale_color_gradient2(name = "", low = "blue", mid = "white", high = "red") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(x=NULL, y = NULL) +
#xlab(paste(paste("Axis 1:", (100*round(perc_explained[1],3)), sep=" "), "%", sep="")) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(), axis.text.y = element_blank(), legend.text.align = 1, legend.title = element_blank(), legend.position = 'bottom')
country_pcoa = pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_country_limited), cex = 2) +
scale_color_discrete(name="Country") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(),legend.title = element_blank(), legend.position = 'bottom') +
scale_color_calc()
country_pcoa = pop_pcoa  = ggplot(data=data.frame(bc_pcoa$vectors), aes(x=Axis.1, y=Axis.2)) +
geom_point(aes(color = g_s_country_limited), cex = 2) +
scale_color_discrete(name="Country") +
theme_bw() + theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank(), text = element_text(size = 12)) +
labs(y=NULL, x = NULL) +
theme(legend.key.width=unit(1,"cm"), axis.title.y = element_blank(),legend.title = element_blank(), legend.position = 'bottom') +
scale_color_calc()
