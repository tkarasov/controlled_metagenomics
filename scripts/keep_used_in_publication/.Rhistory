library(reshape2)
library('dplyr')
library('tidyr')
library(ggplot2)
library(RColorBrewer)
library(wesanderson)
library(matrixStats)
require(gridExtra)
library(cowplot)
library(intrval)
library("Hmisc")
library("Hmisc")
library(ape)
library(cowplot)
library(vegan)
library(extrafont)
library(lme4)
library("Hmisc")
library(ape)
library(cowplot)
library(vegan)
library(extrafont)
library(lme4)
loadfonts()
manual_colors=c("darkblue", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1", "lightskyblue", "darkgreen", "deeppink", "khaki2", "firebrick", "brown1", "darkorange1", "cyan1", "royalblue4", "darksalmon", "darkblue", "royalblue4", "dodgerblue3", "steelblue1", "lightskyblue", "darkseagreen", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1", "brown1", "darkorange1", "cyan1", "darkgrey")
process_gs<-function(g_s, subset=FALSE, classifier=cf, classifier_identity=cfi){
#function that takes gs
if(subset==TRUE){
g_temp<-g_s[which(g_s[[cf]]==cfi),]
}
else{
g_temp<-g_s
}
g_s_otus <- g_temp[,which(colnames(g_temp)%ni%c("population", "country", "load"))]
g_s_load <-g_temp$load
#[which(apply((g_s_otus), 1, var)!=0)]
g_s_pop <-g_temp$population
#[which(apply((g_s_otus), 1, var)!=0)]
g_s_country <-g_temp$country
#[which(apply((g_s_otus), 1, var)!=0)]
#g_s_otus <-g_s[,which(apply((g_s), 1, var)!=0)]
#first samples that are missing
g_s_otus <-g_s_otus
#[which(apply((g_s_otus), 1, var)!=0),]
#Next taxa that are absent
g_s_otus <-g_s_otus
#[which(apply(t(g_s_otus), 2, var)!=0),]
#remove families that are
keep_0.001 <- which(colSums(g_s_otus)/dim(g_s_otus)[1]>0.00001)
g_s_otus_filter <- g_s_otus[,keep_0.001]
#now make compositional
g_s_otus_filter <- g_s_otus_filter/rowSums(g_s_otus)
together<-list(g_s_otus_filter, g_s_country, g_s_pop, g_s_load)
return(together)
}
concat_name="_bacteria.csv"
g_s_bacteria=read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot_bacteria = process_gs(g_s_bacteria, subset=FALSE)
concat_name="_oomycete.csv"
g_s_oomycete=read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot_oomycete = process_gs(g_s_oomycete, subset=FALSE)
concat_name="_fungi.csv"
g_s_fungi=read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_tot_fungi = process_gs(g_s_fungi, subset=FALSE)
g_s_otus_filter_bacteria = g_s_tot_bacteria[[1]]
g_s_country = g_s_tot_bacteria[[2]]
g_s_pop_bacteria = g_s_tot_bacteria[[3]]
g_s_load_bacteria = g_s_tot_bacteria[[4]]
g_s_otus_filter_oomycete = g_s_tot_oomycete[[1]]
g_s_country = g_s_tot_oomycete[[2]]
g_s_pop_oomycete = g_s_tot_oomycete[[3]]
g_s_load_oomycete = g_s_tot_oomycete[[4]]
g_s_otus_filter_fungi = g_s_tot_fungi[[1]]
g_s_country = g_s_tot_fungi[[2]]
g_s_pop_fungi = g_s_tot_fungi[[3]]
g_s_load_fungi = g_s_tot_fungi[[4]]
shannon_div <- vegan::diversity(g_s_otus_filter_bacteria, index = "shannon")
simpson_div <- vegan::diversity(g_s_otus_filter_bacteria, index="simpson")
J <- shannon_div/log(specnumber(g_s_otus_filter_bacteria))
max_tax=apply(g_s_otus_filter_bacteria, 1, max)
max_tax_names = colnames(g_s_otus_filter_bacteria)[as.integer(apply(g_s_otus_filter_bacteria, 1, which.max))]
div_tog = bind_cols(load_bac = g_s_load_bacteria, load_oom = g_s_load_oomycete, load_fungi = g_s_load_fungi, shannon = shannon_div, simpson = simpson_div, J=J, max_tax = max_tax)
J_plot_bac<-ggplot(data=div_tog, aes(x=log10(load_bac), y=J)) +
geom_point(pch=20) +
geom_smooth(method='lm', color='red', level=0) +
theme_bw() +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab(expression(paste(' Load (log'[10],"(Total Microb. Cov./Plant Cov.))", sep=""))) +
ylab("Evenness (Pielou's J)")
J_plot_oom<-ggplot(data=div_tog, aes(x=log10(load_oom), y=J)) +
geom_point(pch=20) +
geom_smooth(method='lm', color='red', level=0) +
theme_bw() +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab(expression(paste(' Load (log'[10],"(Total Microb. Cov./Plant Cov.))", sep=""))) +
ylab("Evenness (Pielou's J)")
Shannon_div_plot_bac<-ggplot(data=div_tog, aes(x=load_bac, y=shannon)) +
geom_point(pch=20) +
geom_smooth(method='lm', color='red', level=0) +
theme_bw() +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab(expression(paste(' Load (log'[10],"(Total Microb. Cov./Plant Cov.))", sep=""))) +
ylab("Shannon Index (H')")
Shannon_div_plot_oom<-ggplot(data=div_tog, aes(x=log10(load_oom), y=shannon)) +
geom_point(pch=20) +
geom_smooth(method='lm', color='red', level=0) +
theme_bw() +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab(expression(paste(' Load (log'[10],"(Total Microb. Cov./Plant Cov.))", sep=""))) +
ylab("Shannon Index (H')")
max_plot<-ggplot(data=div_tog, aes(x=log10(load_bac), y=max_tax)) +
geom_point(pch=20) +
geom_smooth(method='lm', color='red', level=0) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab(expression(paste(' Load (log'[10],"(Total Microb. Cov./Plant Cov.))", sep=""))) +
ylab("Maximum Abundance (% of total)") +
scale_y_continuous(labels = function(x) x * 100) +
geom_text(aes(label=ifelse(load_bac>5,as.character(max_tax_names),'')),position=position_jitter(width=.1,height=.1))
plot_grid(J_plot_bac, max_plot, ncol=1)
g_s_all_info = bind_cols(country = g_s_country, pop = g_s_pop_bacteria, load_bac = g_s_load_bacteria, load_fungi = g_s_load_fungi, load_oom = g_s_load_oomycete)
g_s_all_info = g_s_all_info[which(is.na(g_s_all_info$pop)==FALSE),]
wilcox.test(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_bac, g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_bac)
wilcox.test(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_fungi, g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_fungi)
wilcox.test(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom, g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_oom)
g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom
hist(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom)
hist(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom)
hist(g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom, breaks=10)
hist(g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_oom, breaks=10)
class(g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_oom)
t.test(g_s_all_info[which(g_s_all_info$country == "Sweden"),]$load_oom, g_s_all_info[which(g_s_all_info$country == "germany"),]$load_oom)
g_s_tot_oomycete
dim(g_s_tot_oomycete)
dim(g_s_tot_oomycete[1])
dim(g_s_tot_oomycete[[1]])
out_oom
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library('dplyr')
library('tidyr')
library(ggplot2)
library(RColorBrewer)
library(wesanderson)
library(matrixStats)
require(gridExtra)
library(cowplot)
#library(moments)
library(intrval)
library("Hmisc")
library(ape)
library(cowplot)
library(vegan)
library(extrafont)
library(lme4)
#font_import()
loadfonts()
manual_colors=c("darkblue", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1", "lightskyblue", "darkgreen", "deeppink", "khaki2", "firebrick", "brown1", "darkorange1", "cyan1", "royalblue4", "darksalmon", "darkblue", "royalblue4", "dodgerblue3", "steelblue1", "lightskyblue", "darkseagreen", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1", "brown1", "darkorange1", "cyan1", "darkgrey")
source("~/Dropbox/controlled_metagenomics/scripts/keep_used_in_publication/controlled_metagenomics_functions.R")
german_samples=read.table("~/Dropbox/germany_pathogen_collections/sample_data/plate_sample_locations/sample_infoFinal_2018.txt", sep="\t", header=T)
keep=german_samples[-which(duplicated(german_samples$uniqueID)),]
out_bacteria=meta_table("bacteria")
p_bac=plot_side_by_side(out_bacteria)
out_fungi=meta_table("fungi")
p_fungi=plot_side_by_side(out_fungi)
out_oom=meta_table("oomycete")
p_oom=plot_side_by_side(out_oom)
out_oom
g_s_oomycete
g_s_oomycete=read.csv(paste("~/Dropbox/controlled_metagenomics/results_figures/sweden_germany_combined", concat_name, sep=''), header = TRUE, row.names = 1, stringsAsFactors = FALSE)
g_s_oomycete
colSums(g_s_oomycete)
as.matrix(g_s_oomycete)
g_temp = g_s_oomycete
g_s_otus <- g_temp[,which(colnames(g_temp)%ni%c("population", "country", "load"))]
g_s_otus
colSums(g_s_otus)
hist(colSums(g_s_otus))
hist(rowSums(g_s_otus))
(rowSums(g_s_otus))
120/6
(20*20)/(20*20 + 1*120)
(12*20)/(12*20 + 1*120)
(20*6)/(20*6 + 1*120)
out_oomycete
out_oom
?meta_table
concat_name
concat_name = "_oomycete.csv"
concat_name=paste(level,".csv",sep="")
meta_sweden=read.table(paste("~/work_main/abt6_projects9/metagenomic_controlled/data/processed_reads/swedish_samples/meta_family_corrected_per_plant_", concat_name, sep=""), sep=",",header=T, row.names = 1)
concat_name = "oomycete.csv"
meta_sweden=read.table(paste("~/work_main/abt6_projects9/metagenomic_controlled/data/processed_reads/swedish_samples/meta_family_corrected_per_plant_", concat_name, sep=""), sep=",",header=T, row.names = 1)
meta_german1=read.table(paste("~/work_main/abt6_projects9/metagenomic_controlled/data/processed_reads/german_samples/meta_family_corrected_per_plant_", concat_name, sep=""), sep=",",header=T, row.names = 1)
meta_german=meta_german1[,keep$metagenome_identifier]
top_swed=sort(rowSums(meta_sweden, na.rm=TRUE), decreasing=TRUE )[1:5]
top_germ=sort(rowSums(meta_german, na.rm=TRUE), decreasing=TRUE )[1:5]
together=unique(c(names(top_germ), names(top_swed)))
germany_processed=process_microb_melt(meta_german, together)
germany_processed$value=as.numeric(as.character(germany_processed$value))
sweden_processed=process_microb_melt(meta_sweden,together)
sweden_processed$value=as.numeric(as.character(sweden_processed$value))
out<-list()
out$germany=germany_processed
out$sweden=sweden_processed
out
out$sweden
rowSums(meta_sweden, na.rm=TRUE), decreasing=TRUE )
rowSums(meta_sweden, na.rm=TRUE)
colSums(meta_sweden, na.rm=TRUE), decreasing=TRUE )
colSums(meta_sweden, na.rm=TRUE)
hist(colSums(meta_sweden, na.rm=TRUE))
hist(colSums(meta_sweden, na.rm=TRUE), breaks = 30)
wilcox.test(colSums(meta_german), colSums(meta_sweden))
metacolSums(meta_german)
hist(colSums(meta_german))
library(ggmap)
install.packages("ggmap")
library(ggmap)
scalebar = function(x,y,w,n,d, units="km"){
# x,y = lower left coordinate of bar
# w = width of bar
# n = number of divisions on bar
# d = distance along each division
bar = data.frame(
xmin = seq(0.0, n*d, by=d) + x,
xmax = seq(0.0, n*d, by=d) + x + d,
ymin = y,
ymax = y+w,
z = rep(c(1,0),n)[1:(n+1)],
fill.col = rep(c("black","white"),n)[1:(n+1)])
labs = data.frame(
xlab = c(seq(0.0, (n+1)*d, by=d) + x, x),
ylab = c(rep(y+w*1.5, n+2), y+3*w),
text = c(as.character(seq(0.0, ((n+1)*d)/1000, by=d/1000)), units)
)
list(bar, labs)
}
locations=read.table("~/Dropbox/germany_pathogen_collections/data_files_rmarkdown/location_sampling_lat_long.txt",header=T)
pdf("~/Dropbox/germany_pathogen_collections/data_files_rmarkdown/locations_collections.pdf")
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = scalebar[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
scalebar
sb = scalebar(9.05,48.45, 0.005, , 0.0143, "km" )
scalebar = function(x,y,w,n,d, units="km"){
# x,y = lower left coordinate of bar
# w = width of bar
# n = number of divisions on bar
# d = distance along each division
bar = data.frame(
xmin = seq(0.0, n*d, by=d) + x,
xmax = seq(0.0, n*d, by=d) + x + d,
ymin = y,
ymax = y+w,
z = rep(c(1,0),n)[1:(n+1)],
fill.col = rep(c("black","white"),n)[1:(n+1)])
labs = data.frame(
xlab = c(seq(0.0, (n+1)*d, by=d) + x, x),
ylab = c(rep(y+w*1.5, n+2), y+3*w),
text = c(as.character(seq(0.0, ((n+1)*d)/1000, by=d/1000)), units)
)
list(bar, labs)
}
scalebar = function(x,y,w,n,d, units="km"){
# x,y = lower left coordinate of bar
# w = width of bar
# n = number of divisions on bar
# d = distance along each division
bar = data.frame(
xmin = seq(0.0, n*d, by=d) + x,
xmax = seq(0.0, n*d, by=d) + x + d,
ymin = y,
ymax = y+w,
z = rep(c(1,0),n)[1:(n+1)],
fill.col = rep(c("black","white"),n)[1:(n+1)])
labs = data.frame(
xlab = c(seq(0.0, (n+1)*d, by=d) + x, x),
ylab = c(rep(y+w*1.5, n+2), y+3*w),
text = c(as.character(seq(0.0, ((n+1)*d)/1000, by=d/1000)), units)
)
list(bar, labs)
}
sb = scalebar(9.05,48.45, 0.005, , 0.0143, "km" )
sb = scalebar(x = 9.05, y = 48.45, w = 0.005, n = 3ß , 0.0143, "km" )
sb = scalebar(x = 9.05, y = 48.45, w = 0.005, n = 3ß , 0.0143, "km" )
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
sb
sb = scalebar(x = 9.05, y = 48.45, w = 0.005, n = 3ß , 0.0143, "km" )
sb = scalebar(x = 9.05, y = 48.45, w = 0.005, n = 3 , 0.0143, "km" )
sb
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
dev.off()
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
sb = scalebar(9.05,48.45, 0.005, n = 5, 0.0143, "km" )
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T)
sb = scalebar(9.05,48.45, 0.005, n = 5, 0.0143, "km" )
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T)
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T)
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T, sep="\t")
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T, sep="\t")
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T, sep="\t")
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T, sep="\t")
library(ggmap)
#plot locations of collections
scalebar = function(x,y,w,n,d, units="km"){
# x,y = lower left coordinate of bar
# w = width of bar
# n = number of divisions on bar
# d = distance along each division
bar = data.frame(
xmin = seq(0.0, n*d, by=d) + x,
xmax = seq(0.0, n*d, by=d) + x + d,
ymin = y,
ymax = y+w,
z = rep(c(1,0),n)[1:(n+1)],
fill.col = rep(c("black","white"),n)[1:(n+1)])
labs = data.frame(
xlab = c(seq(0.0, (n+1)*d, by=d) + x, x),
ylab = c(rep(y+w*1.5, n+2), y+3*w),
text = c(as.character(seq(0.0, ((n+1)*d)/1000, by=d/1000)), units)
)
list(bar, labs)
}
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
pdf("~/Dropbox/controlled_metagenomics/results_figures/swedish_map.pdf")
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
dev.off()
qmplot(Longitude, Latitude, data = locations, extent = "panel", maptype = "toner-lite")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
sb = scalebar(x = 9.05, y = 48.45, w = 0.005, n = 3 , 0.0143, "km" )
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
locations=read.table("~/Dropbox/controlled_metagenomics/Swedish_samples/swedish_sites.txt",header=T, sep="\t")
sb = scalebar(9.05,48.45, 0.005, n = 5, 0.0143, "km" )
qmplot(Longitude, Latitude, data = locations, extent = "panel")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", maptype = "toner-lite", colour = I("red"),size = I(0.9))+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
?qmplot
")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
dev.off()
dev.off()
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw")+geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw")
library(ggplot2)
library(tidyverse)
head(crime)
qmplot(lon, lat, data = crime, maptype = "toner-lite", colour = I("red"),size = I(0.9),alpha=.3) +
theme(legend.position="none")
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw")+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "color")+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "color", margins = TRUE)+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", color = "bw", margins = TRUE)+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw", margins = TRUE)+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
data(Sacramento)
df <- Sacramento %>% group_by(city) %>%
summarize(median_price = median(price), transactions = n(),
latitude = mean(latitude), longitude = mean(longitude))
ggmap()
map <- get_stamenmap(sac_borders, zoom = 10, maptype = "toner-lite")
sac_borders <- c(bottom  = min(Sacramento$latitude)  - 0.1 * height,
top     = max(Sacramento$latitude)  + 0.1 * height,
left    = min(Sacramento$longitude) - 0.1 * width,
right   = max(Sacramento$longitude) + 0.1 * width)
qmplot(Longitude, Latitude, data = locations, mapcolor = "bw", margins = TRUE)
dev.off()
qmplot(Longitude, Latitude, data = locations, extent = "panel", mapcolor = "bw")
qmplot(Longitude, Latitude, data = locations, extent = "panel", maptype = "toner")+
geom_point(color="RED", cex=4)+geom_rect(data=sb[[1]], aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=z), inherit.aes=F, show.legend = F,  color = "black", fill = sb[[1]]$fill.col)+
geom_text(data=sb[[2]], aes(x=xlab, y=ylab, label=text), inherit.aes=F, show.legend = F)
qmplot(Longitude, Latitude, data = locations, extent = "panel", maptype = "toner")
